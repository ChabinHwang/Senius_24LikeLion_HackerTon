{"ast":null,"code":"var _jsxFileName = \"/Users/chabin37/Desktop/Project/Senius_24LikeLion_HackerTon/senius/src/LoginSlider.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./styles/LoginSlider.css\";\nimport { ReactComponent as IconKakako } from \"./assets/카카오로그인.svg\";\nimport { useGlobalState } from \"./GlobalState\"; // GlobalState에서 custom hook을 가져옵니다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginSlider({\n  slides = []\n}) {\n  _s();\n  const {\n    dispatch\n  } = useGlobalState(); // 전역 상태의 dispatch를 가져옵니다.\n  const [code, setCode] = useState(null);\n  const [state, setState] = useState(null);\n  useEffect(() => {\n    if (code) {\n      alert(\"TLqkf\");\n      axios.get(`http://localhost:8080/login/oauth2/code/kakao?code=${code}&state=${state}`, {\n        withCredentials: true\n      }).then(response => {\n        console.log('GET 요청 성공:', response.data);\n        // 전역 상태에 사용자 ID를 저장합니다.\n        dispatch({\n          type: 'SET_ID',\n          payload: response.data.id\n        });\n      }).catch(error => {\n        console.error('GET 요청 실패:', error);\n      });\n    }\n  }, [code, state, dispatch]);\n  const handleKakaoLoginClick = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    const state = urlParams.get('state');\n    if (code) {\n      setCode(code);\n      setState(state);\n    } else {\n      window.location.href = 'http://localhost:8080/login';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kakao-login-button\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"kakao-login-content\",\n        children: [/*#__PURE__*/_jsxDEV(IconKakako, {\n          className: \"kakao-login-icon\",\n          alt: \"Kakao Icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"kakao-login-text\",\n          onClick: handleKakaoLoginClick,\n          children: \"\\uCE74\\uCE74\\uC624\\uD1A1 \\uB85C\\uADF8\\uC778\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginSlider, \"cO944NrpYimdlSk12elEQiGiqis=\", false, function () {\n  return [useGlobalState];\n});\n_c = LoginSlider;\nexport default LoginSlider;\nvar _c;\n$RefreshReg$(_c, \"LoginSlider\");","map":{"version":3,"names":["React","useEffect","useState","axios","ReactComponent","IconKakako","useGlobalState","jsxDEV","_jsxDEV","LoginSlider","slides","_s","dispatch","code","setCode","state","setState","alert","get","withCredentials","then","response","console","log","data","type","payload","id","catch","error","handleKakaoLoginClick","urlParams","URLSearchParams","window","location","search","href","className","children","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/chabin37/Desktop/Project/Senius_24LikeLion_HackerTon/senius/src/LoginSlider.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./styles/LoginSlider.css\";\nimport { ReactComponent as IconKakako } from \"./assets/카카오로그인.svg\";\nimport { useGlobalState } from \"./GlobalState\"; // GlobalState에서 custom hook을 가져옵니다.\n\nfunction LoginSlider({ slides = [] }) {\n    const { dispatch } = useGlobalState(); // 전역 상태의 dispatch를 가져옵니다.\n    const [code, setCode] = useState(null);\n    const [state, setState] = useState(null);\n\n    useEffect(() => {\n        if (code) {\n            alert(\"TLqkf\");\n            axios.get(`http://localhost:8080/login/oauth2/code/kakao?code=${code}&state=${state}`, { withCredentials: true })\n                .then(response => {\n                    console.log('GET 요청 성공:', response.data);\n                    // 전역 상태에 사용자 ID를 저장합니다.\n                    dispatch({ type: 'SET_ID', payload: response.data.id });\n                })\n                .catch(error => {\n                    console.error('GET 요청 실패:', error);\n                });\n        }\n    }, [code, state, dispatch]);\n\n    const handleKakaoLoginClick = () => {\n        const urlParams = new URLSearchParams(window.location.search);\n        const code = urlParams.get('code');\n        const state = urlParams.get('state');\n\n        if (code) {\n            setCode(code);\n            setState(state);\n        } else {\n            window.location.href = 'http://localhost:8080/login';\n        }\n    };\n\n    return (\n        <div className=\"screen\">\n            <div className=\"kakao-login-button\">\n                <div className=\"kakao-login-content\">\n                    <IconKakako className=\"kakao-login-icon\" alt=\"Kakao Icon\" />\n                    <div className=\"kakao-login-text\" onClick={handleKakaoLoginClick}>\n                        카카오톡 로그인하기\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default LoginSlider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}