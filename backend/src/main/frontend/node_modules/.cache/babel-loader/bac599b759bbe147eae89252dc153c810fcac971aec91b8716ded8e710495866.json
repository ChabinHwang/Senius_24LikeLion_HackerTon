{"ast":null,"code":"var _jsxFileName = \"/Users/chabin37/Desktop/Project/Senius_24LikeLion_HackerTon/senius/src/LoginSlider.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./styles/LoginSlider.css\";\nimport { ReactComponent as Image12 } from \"./assets/image 12.svg\";\nimport { ReactComponent as IconKakako } from \"./assets/카카오로그인.svg\";\nimport { useGlobalState } from \"./GlobalState\"; // GlobalState에서 custom hook을 가져옵니다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginSlider({\n  slides = []\n}) {\n  _s();\n  const {\n    dispatch\n  } = useGlobalState(); // 전역 상태의 dispatch를 가져옵니다.\n  useEffect(() => {\n    // URL에서 authorization code 추출\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    if (code) {\n      // 서버로 authorization code를 보내고 응답을 받음\n      axios.post('/login/oauth2/code/kakao', {\n        code\n      }).then(response => {\n        console.log('Server Response:', response.data);\n        // 응답 데이터를 상태로 저장하거나 원하는 로직 추가\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    }\n  }, []);\n  const handleKakaoLoginClick = () => {\n    window.location.href = 'https://kauth.kakao.com/oauth/authorize?response_type=code&client_id=4fd07ea2b22cd1efe588cb88ceb5763c&redirect_uri=http://localhost:8080/login/oauth2/code/kakao';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kakao-login-button\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"kakao-login-content\",\n        children: [/*#__PURE__*/_jsxDEV(IconKakako, {\n          className: \"kakao-login-icon\",\n          alt: \"Kakao Icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"kakao-login-text\",\n          onClick: handleKakaoLoginClick,\n          children: \"\\uCE74\\uCE74\\uC624\\uD1A1 \\uB85C\\uADF8\\uC778\\uD558\\uAE30\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(LoginSlider, \"7Tk2C0anNZ5wFqzPk7x/LNzgPoM=\", false, function () {\n  return [useGlobalState];\n});\n_c = LoginSlider;\nexport default LoginSlider;\nvar _c;\n$RefreshReg$(_c, \"LoginSlider\");","map":{"version":3,"names":["React","useEffect","axios","ReactComponent","Image12","IconKakako","useGlobalState","jsxDEV","_jsxDEV","LoginSlider","slides","_s","dispatch","urlParams","URLSearchParams","window","location","search","code","get","post","then","response","console","log","data","catch","error","handleKakaoLoginClick","href","className","children","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/chabin37/Desktop/Project/Senius_24LikeLion_HackerTon/senius/src/LoginSlider.js"],"sourcesContent":["import React, {useEffect} from \"react\";\nimport axios from \"axios\";\nimport \"./styles/LoginSlider.css\";\nimport { ReactComponent as Image12 } from \"./assets/image 12.svg\";\nimport { ReactComponent as IconKakako } from \"./assets/카카오로그인.svg\";\nimport { useGlobalState } from \"./GlobalState\"; // GlobalState에서 custom hook을 가져옵니다.\n\nfunction LoginSlider({ slides = [] }) {\n    const { dispatch } = useGlobalState(); // 전역 상태의 dispatch를 가져옵니다.\n    useEffect(() => {\n        // URL에서 authorization code 추출\n        const urlParams = new URLSearchParams(window.location.search);\n        const code = urlParams.get('code');\n\n        if (code) {\n            // 서버로 authorization code를 보내고 응답을 받음\n            axios.post('/login/oauth2/code/kakao', { code })\n                .then(response => {\n                    console.log('Server Response:', response.data);\n                    // 응답 데이터를 상태로 저장하거나 원하는 로직 추가\n                })\n                .catch(error => {\n                    console.error('Error:', error);\n                });\n        }\n    }, []);\n\n    const handleKakaoLoginClick = () => {\n        window.location.href = 'https://kauth.kakao.com/oauth/authorize?response_type=code&client_id=4fd07ea2b22cd1efe588cb88ceb5763c&redirect_uri=http://localhost:8080/login/oauth2/code/kakao';\n    };\n\n\n    return (\n        <div className=\"screen\">\n            <div className=\"kakao-login-button\">\n                <div className=\"kakao-login-content\">\n                    <IconKakako className=\"kakao-login-icon\" alt=\"Kakao Icon\" />\n                    <div className=\"kakao-login-text\" onClick={handleKakaoLoginClick}>\n                        카카오톡 로그인하기\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default LoginSlider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,0BAA0B;AACjC,SAASC,cAAc,IAAIC,OAAO,QAAQ,uBAAuB;AACjE,SAASD,cAAc,IAAIE,UAAU,QAAQ,qBAAqB;AAClE,SAASC,cAAc,QAAQ,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,WAAWA,CAAC;EAAEC,MAAM,GAAG;AAAG,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM;IAAEC;EAAS,CAAC,GAAGN,cAAc,CAAC,CAAC,CAAC,CAAC;EACvCL,SAAS,CAAC,MAAM;IACZ;IACA,MAAMY,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;IAC7D,MAAMC,IAAI,GAAGL,SAAS,CAACM,GAAG,CAAC,MAAM,CAAC;IAElC,IAAID,IAAI,EAAE;MACN;MACAhB,KAAK,CAACkB,IAAI,CAAC,0BAA0B,EAAE;QAAEF;MAAK,CAAC,CAAC,CAC3CG,IAAI,CAACC,QAAQ,IAAI;QACdC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,QAAQ,CAACG,IAAI,CAAC;QAC9C;MACJ,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;QACZJ,OAAO,CAACI,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAClC,CAAC,CAAC;IACV;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;IAChCb,MAAM,CAACC,QAAQ,CAACa,IAAI,GAAG,kKAAkK;EAC7L,CAAC;EAGD,oBACIrB,OAAA;IAAKsB,SAAS,EAAC,QAAQ;IAAAC,QAAA,eACnBvB,OAAA;MAAKsB,SAAS,EAAC,oBAAoB;MAAAC,QAAA,eAC/BvB,OAAA;QAAKsB,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAChCvB,OAAA,CAACH,UAAU;UAACyB,SAAS,EAAC,kBAAkB;UAACE,GAAG,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC5D5B,OAAA;UAAKsB,SAAS,EAAC,kBAAkB;UAACO,OAAO,EAAET,qBAAsB;UAAAG,QAAA,EAAC;QAElE;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACzB,EAAA,CArCQF,WAAW;EAAA,QACKH,cAAc;AAAA;AAAAgC,EAAA,GAD9B7B,WAAW;AAuCpB,eAAeA,WAAW;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}